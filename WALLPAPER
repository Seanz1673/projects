import java.applet.Applet;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class backArea extends JPanel {
	/**
	 * 
	 */

	private static final long serialVersionUID = 1L;
	 static Graphics g= null;

	public static class squareDraw implements ActionListener	{
	
	
		@Override
		public void actionPerformed(ActionEvent e) {
			//shapeGenerator.page.repaint();
			squareDraw2 sd2= new squareDraw2();
			sd2.paint(g);
		}

}
 @SuppressWarnings("serial")
static class squareDraw2 extends Applet	{
	 public void paint(Graphics g)	{
		 shapeGenerator.page.remove(shapeGenerator.backDescription);
		 shapeGenerator.page.repaint();
		 shapeGenerator.page.remove(shapeGenerator.buttons);
	 for (int x=0; x<=175; x++)	{
		int r= (int)(Math.random()*255);
		int d= (int)(Math.random()*255);
		int b= (int)(Math.random()*255);
		/*	int r1= (int)(Math.random()*255);
		int d1= (int)(Math.random()*255);
		int b1= (int)(Math.random()*255);
		Color startColor=new Color(r1,d1,b1);
		int r2= (int)(Math.random()*255);
		int d2= (int)(Math.random()*255);
		int b2= (int)(Math.random()*255);
		int a= (int)(Math.random()*255);*/
	//	GradientPaint gradient= new GradientPaint(x1, y1, startColor, a);
	
		Color color= new Color(r,d,b);
		int side= (int) (Math.random()*500);
		int side2= (int)(Math.random()*300);
		int x1= (int)(Math.random()*750);
		int y1= (int) (Math.random()*750);
		g.setColor(color);
		g.fillRect(x1, y1, side, side);	
		g.fillRect(x1, y1, side, side2);
				}
	 }
 
	}
	
	static class triangleDraw implements ActionListener	{
		
		public void triDraw(Graphics g)	{
			shapeGenerator.page.remove(shapeGenerator.backDescription);
			shapeGenerator.page.repaint();
			for (int x=0; x<=75; x++)	{
				int r;
				r= (int)(Math.random()*255);
				int d;
				d= (int)(Math.random()*255);
				int b;
				b= (int)(Math.random()*255);
				int a;
				a= (int)(Math.random()*255);
				Color color= new Color(r,d,b,a);
				g.setColor(color);
				int[]xs= {(int)Math.random()*300, (int)Math.random()*200,(int) Math.random()*275};
				int[] ys= {(int)Math.random()*300, (int)Math.random()*500, (int)Math.random()*400};
				g.fillPolygon(xs, ys, 3);
				int[]xs2= {(int)Math.random()*600, (int)Math.random()*400,(int) Math.random()*550};
				int[]ys2= {(int)Math.random()*450, (int)Math.random()*300,(int) Math.random()*300};
				g.fillPolygon(xs2, ys2, 3);
			}
		}

		@Override
		public void actionPerformed(ActionEvent arg0) {
			// TODO Auto-generated method stub
			//shapeGenerator.page.remove(shapeGenerator.backDescription);
			triDraw(g);
		}
	}
	static class both implements ActionListener	{
		
		public void paint(Graphics g)	{
			for (int x= 0; x<=300; x++)	{
				int r;
				r= (int)(Math.random()*255);
				int d;
				d= (int)(Math.random()*255);
				int b;
				b= (int)(Math.random()*255);
				int a;
				a= (int)(Math.random()*255);
				Color color= new Color(r,d,b,a);
				g.setColor(color);
				int[]xs= {(int)Math.random()*300, (int)Math.random()*200,(int) Math.random()*275};
				int[] ys= {(int)Math.random()*300, (int)Math.random()*500, (int)Math.random()*400};
				g.fillPolygon(xs, ys, 3);
				int[]xs2= {(int)Math.random()*600, (int)Math.random()*400,(int) Math.random()*550};
				int[]ys2= {(int)Math.random()*450, (int)Math.random()*300,(int) Math.random()*300};
				g.fillPolygon(xs2, ys2, 3);
				int side= (int) (Math.random()*500);
				int side2= (int)(Math.random()*300);
				int x1= (int)(Math.random()*750);
				int y1= (int) (Math.random()*750);
				g.fillRect(x1, y1, side, side);	
				g.fillRect(x1, y1, side, side2);
		}
		}
		@Override
		public void actionPerformed(ActionEvent arg0) {
			// TODO Auto-generated method stub
				paint(g);
				
			}
		}
		
	}



